
// This wraps the moving pieces to hide their movement
.off-canvas-wrap {
  @include respond-to(knee-up) {
    @include prevent-flicker;
    position: relative;
    overflow: hidden;
  }	  
}

.nav {
  @extend %prevent-flicker;
  max-height: 0px;
  overflow: hidden;
  transition: all .5s $ease-out-cubic;
  // delay while the elements slide out
  transition-delay: $item-slide-duration * $total-items;
          
  @include respond-to(knee-up) {
    max-height: none !important;
    
    // needs a width
    width: $main-menu-width;
    
    // remove from flow, take up full height
    position: absolute;
    top: 0;
    bottom: 0;
    z-index: 1;
    background-color: $header-and-nav-bg;
    
    // handle the possibility that the content isn't big enough for the nav
    overflow: auto; 
    
    transition-delay: 0s;
    transition-duration: $main-menu-slide-duration;

  }
  
  @include respond-to(knee-only) {
    transform: translate3d(-100%,0,0);
  }
  
  .logo-text {
    text-align: center;
    @include rem(margin-top, $font-size-xs);
  }
    
  .project-name {
    @include rem(margin-bottom, $font-size-xs);
  }
  
    // fun!
  @for $i from 1 through $total-items {
    .items > .item:nth-child(#{$total-items + 1 - $i}) {
      transition-delay: $i * $item-slide-duration;

      @include respond-to(desk-up) {
        transition: none;
      }

    }
  }
    
}

.menu {

  .item {
    transition-property: all;
    transition-duration: .33s;
    transition-timing-function: $ease-out-cubic;
    
    // slide them off-canvas
    transform: translate( -100% );
    
    @include respond-to(knee-up) {
      transform: none;
    }

    > a {
      transition: background-color .2s $ease-out-cubic;
    }

  }

  &.primary {
    @include respond-to( desk-up ) {
      border-top: 3px solid palette(gold, light);
    }
  }
}

.main {
  @extend %prevent-flicker;

  @include respond-to(knee-up) {
    transition-property: transform;
    transition-duration: .2s;
    transition-delay: $main-menu-slide-duration;
    transition-timing-function: $ease-out-cubic;
    @include rem(padding-left, 16px);
    @include rem(padding-right, 16px);
  }
  
  @include respond-to(desk-up) {
    margin-left: $main-menu-width;
    transform: none !important;
    transition-delay: 0s;
  }

}

.close-off-canvas {
  @extend %pos-abs;
  // effectively the box is zero pixels
  top: 0;
  right: 0;
  bottom: 100%;
  left: 0;

  background-color: rgba(0,0,0,.25);
  cursor: pointer;

  transition: opacity .4s ease-in-out;
  opacity: 0;
  
}

.primary-nav-is-open {
    
  .nav { 
    // small: expand in height
    max-height: 500px;
    // move immediately
    transition-delay: 0s;
    
    @include respond-to(knee-up) {
      transition-delay: $main-menu-slide-duration;
    }
    
    @include respond-to(knee-only) {
      transform: none;
    }
    
    // bump up the transition delays for each item so they "stack"
    @for $i from 1 through $total-items {
      .items > .item:nth-child(#{$i}) {
        transition-delay: $i * .05s;
      }
    }
    
    // slide items in when open
    .item {
      transform: none;
    }
    
  }
  
  .main {
    @include respond-to(knee-up) {
      transform: translate($main-menu-width,0);
      transition-delay: 0s;
      position: relative;
    }
  }
  
  .close-off-canvas {
    cursor: pointer;
    @include respond-to(knee-only) {
      // expand to full size
      bottom: 0;
      opacity: 1;
    
      // @todo this pops out of existence roughly when you close it
    }
    
  }
  
}
